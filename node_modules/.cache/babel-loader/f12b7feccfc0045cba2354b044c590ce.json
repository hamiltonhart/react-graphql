{"ast":null,"code":"var _jsxFileName = \"/Users/georgehart/Documents/WebDev/boilerplate/django-graphql-react-boilerplate/frontend/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport * as serviceWorker from \"./serviceWorker\"; // !Apollo Client is available to the entire app\n// ! fetchOptions: {credentials: 'include' - means to include operation.headers (just below in the request)}\n\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\",\n  // uri: \"http://example.herokuapp.com/graphql/\"\n  cache,\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  request: operation => {\n    const token = localStorage.getItem(\"authToken\") || \"\";\n    operation.setContext({\n      headers: {\n        Authorization: \"JWT \".concat(token)\n      }\n    });\n  }\n});\ncache.writeData({\n  data: {\n    isLoggedIn: !!localStorage.getItem(\"authToken\")\n  }\n});\n\nconst ApolloApp = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(ApolloApp, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/georgehart/Documents/WebDev/boilerplate/django-graphql-react-boilerplate/frontend/src/index.js"],"names":["React","ReactDOM","App","ApolloProvider","ApolloClient","InMemoryCache","serviceWorker","cache","client","uri","fetchOptions","credentials","request","operation","token","localStorage","getItem","setContext","headers","Authorization","writeData","data","isLoggedIn","ApolloApp","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,YAAP,IAAuBC,aAAvB,QAA4C,cAA5C;AAEA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;AACA;;AACA,MAAMC,KAAK,GAAG,IAAIF,aAAJ,EAAd;AACA,MAAMG,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE,gCADyB;AAE9B;AACAF,EAAAA,KAH8B;AAI9BG,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAJgB;AAO9BC,EAAAA,OAAO,EAAEC,SAAS,IAAI;AACpB,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,EAAnD;AACAH,IAAAA,SAAS,CAACI,UAAV,CAAqB;AACnBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,gBAASL,KAAT;AADN;AADU,KAArB;AAKD;AAd6B,CAAjB,CAAf;AAiBAP,KAAK,CAACa,SAAN,CAAgB;AACdC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,CAAC,CAACP,YAAY,CAACC,OAAb,CAAqB,WAArB;AADV;AADQ,CAAhB;;AAMA,MAAMO,SAAS,GAAG,MAAM;AACtB,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEf,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;AAQAP,QAAQ,CAACuB,MAAT,CAAgB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA+BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA/B,E,CAEA;AACA;AACA;;AACApB,aAAa,CAACqB,UAAd","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\n// !Apollo Client is available to the entire app\n// ! fetchOptions: {credentials: 'include' - means to include operation.headers (just below in the request)}\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\",\n  // uri: \"http://example.herokuapp.com/graphql/\"\n  cache,\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  request: operation => {\n    const token = localStorage.getItem(\"authToken\") || \"\";\n    operation.setContext({\n      headers: {\n        Authorization: `JWT ${token}`\n      }\n    });\n  }\n});\n\ncache.writeData({\n  data: {\n    isLoggedIn: !!localStorage.getItem(\"authToken\")\n  }\n});\n\nconst ApolloApp = () => {\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<ApolloApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}